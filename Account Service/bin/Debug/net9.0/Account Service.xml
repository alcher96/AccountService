<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Account Service</name>
    </assembly>
    <members>
        <member name="T:Account_Service.Transactions.AccountController">
            <summary>
            Контроллер для управления банковскими счетами
            </summary>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.#ctor(MediatR.IMediator)">
            <summary>
            Контроллер для управления банковскими счетами
            </summary>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.CreateAccount(Account_Service.Transactions.AddAccount.Command.CreateAccountCommand)">
            <summary>
            Создаёт новый банковский счёт
            </summary>
            <remarks>
            Создаёт счёт для указанного владельца с заданными параметрами.
            Поддерживаемые валюты: RUB, USD, EUR.
            Процентная ставка обязательна для типов Deposit и Credit, но не для Checking.
            </remarks>
            <param name="command">Данные для создания счёта</param>
            <returns>Созданный счёт</returns>
            <response code="201">Счёт успешно создан</response>
            <response code="400">Недопустимые данные (например, неподдерживаемая валюта)</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.GetAccounts(System.Nullable{System.Guid},System.Nullable{Account_Service.Transactions.AccountType})">
            <summary>
            Получает список счетов с фильтрам по владельцу и типу
            </summary>
            <remarks>
            Возвращает список счетов, отфильтрованный по идентификатору владельца (опционально) и типу счёта (опционально).
            Если параметры не указаны, возвращает все доступные счета.
            </remarks>
            <param name="ownerId">ID владельца (опционально)</param>
            <param name="type">Тип счёта (опционально)</param>
            <returns>Список счетов</returns>
            <response code="200">Список счетов успешно возвращён</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.GetAccountById(System.Guid)">
            <summary>
            Получает данные счёта по идентификатору
            </summary>
            <remarks>
            Возвращает полную информацию о счёте по указанному идентификатору.
            </remarks>
            <param name="id">Идентификатор счёта</param>
            <returns>Данные счёта</returns>
            <response code="200">Счёт найден и возвращён</response>
            <response code="400">Неверный формат идентификатора</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.UpdateAccount(System.Guid,Account_Service.Transactions.UpdateAccount.Command.UpdateAccountRequestDto)">
            <summary>
            Обновляет данные счёта
            </summary>
            <remarks>
            Полностью обновляет данные счёта с указанным идентификатором.
            Все поля должны быть предоставлены.
            </remarks>
            <param name="id">Идентификатор счёта</param>
            <param name="request">Новые данные счёта</param>
            <returns>Обновлённый счёт</returns>
            <response code="200">Счёт успешно обновлён</response>
            <response code="400">Недопустимые данные</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.PatchAccount(System.Guid,Account_Service.Transactions.PatchAccount.Command.PatchAccountRequestDto)">
            <summary>
            Частично обновляет данные счёта
            </summary>
            <remarks>
            Обновляет только указанные поля счёта (например, валюта, процентная ставка).
            Поддерживаемые поля: Currency, Type, InterestRate, Balance.
            Нельзя изменить валюту, если по счёту есть транзакции.
            </remarks>
            <param name="id">Идентификатор счёта</param>
            <param name="request">Данные для частичного обновления</param>
            <returns>Обновлённый счёт</returns>
            <response code="200">Счёт успешно обновлён</response>
            <response code="400">Недопустимые данные или попытка изменить валюту при наличии транзакций</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.AccountController.DeleteAccount(System.Guid)">
            <summary>
            Удаляет счёт
            </summary>
            <remarks>
            Удаляет счёт с указанным идентификатором.
            </remarks>
            <param name="id">Идентификатор счёта</param>
            <returns>Нет содержимого</returns>
            <response code="204">Счёт успешно удалён</response>
            <response code="400">Ошибка валидации</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="T:Account_Service.Transactions.AccountDto">
            <summary>
            ДТО для счета 
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.AccountId">
            <summary>
            идентификатор счета
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.OwnerId">
            <summary>
            Уникальный идентификатор владельца счёта в формате GUID.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.AccountType">
            <summary>
            Тип счёта. Поддерживаемые значения: Checking, Deposit, Credit.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.Currency">
            <summary>
            Валюта счёта. Поддерживаемые значения: RUB, USD, EUR.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.Balance">
            <summary>
            Текущий баланс счёта.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.InterestRate">
            <summary>
            Процентная ставка для счёта (обязательна для Deposit и Credit, 0 для Checking).
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.OpeningDate">
            <summary>
            Дата открытия счёта в формате ISO 8601.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AccountDto.ClosingDate">
            <summary>
             Дата закрытия счёта в формате ISO 8601, или null, если счёт активен.
            </summary>
        </member>
        <member name="T:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand">
            <summary>
            command для создания аккаунта
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand.OwnerId">
            <summary>
            Уникальный идентификатор владельца счета
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand.AccountType">
            <summary>
            Тип счёта. Поддерживаемые значения: Checking, Deposit, Credit.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand.Currency">
            <summary>
            Валюта счёта. Поддерживаемые значения: RUB, USD, EUR.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand.Balance">
            <summary>
            Баланс счета
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddAccount.Command.CreateAccountCommand.InterestRate">
            <summary>
            Процентная ставка (обязательна для Deposit и Credit, игнорируется для Checking).
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand.AccountId">
            <summary>
            Идентификатор счёта, к которому относится транзакция, в формате GUID.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand.Amount">
            <summary>
            Сумма транзакции. Должна быть положительной.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand.Currency">
            <summary>
            Валюта USD RUB EUR.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand.Type">
            <summary>
            Тип транзакции. Поддерживаемые значения: Deposit, Credit.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand.Description">
            <summary>
            Описание транзакции, например, "Пополнение счёта".
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand.FromAccountId">
            <summary>
            Счет с которого производится транзакция.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand.ToAccountId">
            <summary>
            Счет на который производится транзакция.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand.Amount">
            <summary>
            Сумма перевода.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand.Currency">
            <summary>
            Валюта перевода RUB EUR USD.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand.Description">
            <summary>
            Описание транзакции.
            </summary>
        </member>
        <member name="T:Account_Service.Transactions.TransactionController">
            <summary>
            Контроллер для управления транзакциями
            </summary>
        </member>
        <member name="M:Account_Service.Transactions.TransactionController.#ctor(MediatR.IMediator)">
            <summary>
            Контроллер для управления транзакциями
            </summary>
        </member>
        <member name="M:Account_Service.Transactions.TransactionController.CreateTransaction(Account_Service.Transactions.AddTransaction.Command.CreateTransactionCommand)">
            <summary>
            Регистрирует транзакцию по счёту
            </summary>
            <remarks>
            Создаёт новую транзакцию (дебетовую или кредитную) для указанного счёта.
            Валюта транзакции должна совпадать с валютой счёта.
            </remarks>
            <param name="command">Данные транзакции</param>
            <returns>Созданная транзакция</returns>
            <response code="201">Транзакция успешно создана</response>
            <response code="400">Недопустимые данные (например, недостаточно средств)</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.TransactionController.PerformTransfer(Account_Service.Transactions.PerformTransfer.Command.PerformTransferCommand)">
            <summary>
            Выполняет перевод между счетами
            </summary>
            <remarks>
            Создаёт две транзакции: дебетовую для счёта отправителя и кредитную для счёта получателя.
            Валюта перевода должна совпадать с валютами обоих счетов.
            </remarks>
            <param name="command">Данные перевода</param>
            <returns>Массив созданных транзакций</returns>
            <response code="201">Перевод успешно выполнен</response>
            <response code="400">Недопустимые данные (например, недостаточно средств или разные валюты)</response>
            <response code="404">Один из счетов не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="M:Account_Service.Transactions.TransactionController.GetAccountTransactions(System.Guid,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Получает выписку по счёту за период
            </summary>
            <remarks>
            Возвращает список транзакций для указанного счёта, отфильтрованный по датам (опционально).
            Если даты не указаны, возвращаются все транзакции.
            </remarks>
            <param name="accountId">Идентификатор счёта</param>
            <param name="startDate">Начальная дата периода (опционально)</param>
            <param name="endDate">Конечная дата периода (опционально)</param>
            <returns>Список транзакций</returns>
            <response code="200">Выписка успешно возвращена</response>
            <response code="400">Недопустимые даты (например, endDate раньше startDate)</response>
            <response code="404">Счёт не найден</response>
            <response code="401">Для запроса требуется аутентификация</response>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.TransactionId">
            <summary>
            Уникальный идентификатор транзакции в формате GUID.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.AccountId">
            <summary>
            Идентификатор счёта, к которому относится транзакция, в формате GUID.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.CounterpartyAccountId">
             <summary>
            Уникальный идентификатор отправитиля в формате GUID
             </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.Amount">
            <summary>
            Сумма транзакции. Должна быть положительной.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.Currency">
            <summary>
            Валюта транзакции USD RUB EUR.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.Type">
            <summary>
            Тип транзакции. Поддерживаемые значения: Deposit, Withdrawal, Transfer.
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.Description">
            <summary>
            Описание транзакции, например, "Пополнение счёта".
            </summary>
        </member>
        <member name="P:Account_Service.Transactions.TransactionDto.DateTime">
            <summary>
            Дата и время транзакции в формате ISO 8601.
            </summary>
        </member>
        <member name="T:Account_Service.Data.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Account_Service.Data.Migrations.AddAccrueInterestProcedure">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.AddAccrueInterestProcedure.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.AddAccrueInterestProcedure.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Account_Service.Data.Migrations.AddAccrueInterestProcedure.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="P:Account_Service.MbResult`1.IsSuccess">
            <summary>
            Указывает, успешно ли выполнен запрос.
            </summary>
        </member>
        <member name="P:Account_Service.MbResult`1.Value">
            <summary>
            Результат запроса, если запрос успешен, или null, если произошла ошибка.
            </summary>
        </member>
        <member name="P:Account_Service.MbResult`1.MbError">
            <summary>
            Сообщение об ошибке, если запрос неуспешен, или null, если запрос успешен.
            </summary>
        </member>
        <member name="P:Account_Service.MbResult`1.ValidationErrors">
            <summary>
            Список ошибок валидации, если запрос не прошёл валидацию, или null, если валидация успешна.
            </summary>
        </member>
    </members>
</doc>
